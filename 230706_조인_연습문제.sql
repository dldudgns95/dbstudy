-- 1. LOCATION_ID가 1700인 부서에 근무하는 사원들의 EMPLOYEE_ID, FIRST_NAME, DEPARTMENT_NAME을 조회하시오.
-- 1) ANSI
SELECT EMPLOYEE_ID
     , FIRST_NAME
     , DEPARTMENT_NAME
     , LOCATION_ID
  FROM DEPARTMENTS D INNER JOIN EMPLOYEES E
    ON D.LOCATION_ID = 1700;


-- 2) 오라클
SELECT EMPLOYEE_ID
     , FIRST_NAME
     , DEPARTMENT_NAME
     , LOCATION_ID
  FROM DEPARTMENTS D, EMPLOYEES E
 WHERE D.LOCATION_ID = 1700;

-- 2. DEPARTMENT_NAME이 'Executive'인 부서에 근무하는 사원들의 EMPLOYEE_ID, FIRST_NAME을 조회하시오.
-- 1) ANSI
SELECT EMPLOYEE_ID
     , FIRST_NAME
     , D.DEPARTMENT_NAME
  FROM DEPARTMENTS D INNER JOIN EMPLOYEES E
    ON D.DEPARTMENT_ID = E.DEPARTMENT_ID
 WHERE DEPARTMENT_NAME ='Executive';


-- 2) 오라클
SELECT EMPLOYEE_ID
     , FIRST_NAME
     , D.DEPARTMENT_NAME
  FROM DEPARTMENTS D, EMPLOYEES E
 WHERE D.DEPARTMENT_ID = E.DEPARTMENT_ID
   AND DEPARTMENT_NAME = 'Executive';


-- 3. 모든 사원들의 EMPLOYEE_ID, FIRST_NAME, DEPARTMENT_NAME, STREET_ADDRESS, CITY를 조회하시오.
-- 1) ANSI
SELECT EMPLOYEE_ID
     , FIRST_NAME
     , DEPARTMENT_NAME
     , STREET_ADDRESS
     , CITY
  FROM LOCATIONS L RIGHT OUTER JOIN DEPARTMENTS D
    ON L.LOCATION_ID = D.LOCATION_ID RIGHT OUTER JOIN EMPLOYEES E
    ON D.DEPARTMENT_ID = E.DEPARTMENT_ID
 ORDER BY EMPLOYEE_ID;
-- 2) 오라클
SELECT EMPLOYEE_ID
     , FIRST_NAME
     , DEPARTMENT_NAME
     , STREET_ADDRESS
     , CITY
  FROM LOCATIONS L, DEPARTMENTS D, EMPLOYEES E
 WHERE L.LOCATION_ID(+) = D.LOCATION_ID
   AND D.DEPARTMENT_ID(+) = E.DEPARTMENT_ID
 ORDER BY EMPLOYEE_ID;


-- 4. 부서별 DEPARTMENT_NAME과 사원 수와 평균 연봉을 조회하시오.
-- 1) ANSI
SELECT D.DEPARTMENT_ID                                 AS 부서번호
     , D.DEPARTMENT_NAME                               AS 부서이름
     , COUNT(*)                                        AS 사원수
     , ROUND(AVG(E.SALARY))                            AS 평균연봉
  FROM DEPARTMENTS D INNER JOIN EMPLOYEES E
    ON D.DEPARTMENT_ID = E.DEPARTMENT_ID
 GROUP BY D.DEPARTMENT_NAME, D.DEPARTMENT_ID;

-- 2) 오라클
SELECT D.DEPARTMENT_ID                                 AS 부서번호
     , D.DEPARTMENT_NAME                               AS 부서이름
     , COUNT(*)                                        AS 사원수
     , ROUND(AVG(E.SALARY))                            AS 평균연봉
  FROM DEPARTMENTS D, EMPLOYEES E
 WHERE D.DEPARTMENT_ID = E.DEPARTMENT_ID
 GROUP BY D.DEPARTMENT_NAME, D.DEPARTMENT_ID;


-- 5. 모든 사원들의 EMPLOYEE_ID, FIRST_NAME, DEPARTMENT_NAME을 조회하시오. 부서가 없는 사원의 부서명은 'None'으로 조회되도록 처리하시오.
-- 1) ANSI
SELECT EMPLOYEE_ID
     , FIRST_NAME
     , NVL(DEPARTMENT_NAME,'None')
  FROM DEPARTMENTS D RIGHT OUTER JOIN EMPLOYEES E
    ON D.DEPARTMENT_ID = E.DEPARTMENT_ID
 ORDER BY EMPLOYEE_ID;


-- 2) 오라클
SELECT EMPLOYEE_ID
     , FIRST_NAME
     , NVL(DEPARTMENT_NAME,'None')
  FROM DEPARTMENTS D, EMPLOYEES E
 WHERE D.DEPARTMENT_ID(+) = E.DEPARTMENT_ID
 ORDER BY EMPLOYEE_ID;


-- 6. 모든 부서의 DEPARTMENT_NAME과 근무 중인 사원 수를 조회하시오. 근무하는 사원이 없으면 0으로 조회하시오.
-- 1) ANSI
SELECT D.DEPARTMENT_ID                                     AS 부서ID
     , DEPARTMENT_NAME                                     AS 부서이름
     , COUNT(E.EMPLOYEE_ID)                                AS 사원수
  FROM DEPARTMENTS D LEFT OUTER JOIN EMPLOYEES E
    ON D.DEPARTMENT_ID = E.DEPARTMENT_ID
 GROUP BY D.DEPARTMENT_ID, D.DEPARTMENT_NAME
 ORDER BY D.DEPARTMENT_ID;


SELECT COUNT(*)
     , DEPARTMENT_ID
  FROM EMPLOYEES
 GROUP BY DEPARTMENT_ID
 ORDER BY DEPARTMENT_ID;
 
-- 2) 오라클
SELECT DISTINCT D.DEPARTMENT_ID                                     AS 부서ID
     , DEPARTMENT_NAME                                              AS 부서이름
     , COUNT(E.DEPARTMENT_ID) OVER(PARTITION BY E.DEPARTMENT_ID)    AS 사원수
  FROM DEPARTMENTS D, EMPLOYEES E
 WHERE D.DEPARTMENT_ID = E.DEPARTMENT_ID(+)
 ORDER BY D.DEPARTMENT_ID;


-- 7. 모든 부서의 DEPARTMENT_ID, DEPARTMENT_NAME, STATE_PROVINCE, COUNTRY_NAME, REGION_NAME을 조회하시오.
-- 1) ANSI
SELECT DEPARTMENT_ID
     , DEPARTMENT_NAME
     , COUNTRY_NAME
     , STATE_PROVINCE
     , REGION_NAME
  FROM REGIONS R INNER JOIN COUNTRIES C
    ON R.REGION_ID = C.REGION_ID INNER JOIN LOCATIONS L
    ON C.COUNTRY_ID = L.COUNTRY_ID RIGHT OUTER JOIN DEPARTMENTS D
    ON L.LOCATION_ID = D.LOCATION_ID
 ORDER BY D.DEPARTMENT_ID;

-- 2) 오라클
SELECT DEPARTMENT_ID
     , DEPARTMENT_NAME
     , COUNTRY_NAME
     , STATE_PROVINCE
     , REGION_NAME
  FROM REGIONS R, COUNTRIES C, LOCATIONS L, DEPARTMENTS D
 WHERE R.REGION_ID = C.REGION_ID 
   AND C.COUNTRY_ID = L.COUNTRY_ID
   AND L.LOCATION_ID(+) = D.LOCATION_ID
 ORDER BY D.DEPARTMENT_ID;


-- 8. 모든 사원들의 EMPLOYEE_ID, FIRST_NAME, LAST_NAME, MANAGER의 FIRST_NAME을 조회하시오. (SELF JOIN)
-- 1) ANSI

-- EMPLOYEES E = 사원 테이블
-- EMPLOYEES M = 상사 테이블

-- ON
-- 사원 테이블의 매니저번호 = 매니저의 사원 번호

-- 사원번호     이름       매니저번호   |       사원번호    이름      매니저번호
-- 1            KIM         NULL        |       1           KIM         NULL
-- 2            LEE         1           |       2           LEE         1
-- 3            PARK        1           |       3           PARK        1

SELECT A.EMPLOYEE_ID, A.FIRST_NAME, A.LAST_NAME         --사원 정보
     , B.FIRST_NAME                                     --매니저 정보
  FROM EMPLOYEES A LEFT OUTER JOIN EMPLOYEES B
    ON A.MANAGER_ID = B.EMPLOYEE_ID
 ORDER BY A.EMPLOYEE_ID;
-- 2) 오라클
SELECT A.EMPLOYEE_ID, A.FIRST_NAME, A.LAST_NAME         --사원 정보
     , B.FIRST_NAME                                     --매니저 정보
  FROM EMPLOYEES A, EMPLOYEES B
 WHERE A.MANAGER_ID = B.EMPLOYEE_ID(+)
 ORDER BY A.EMPLOYEE_ID;


-- 9. 각 사원 중에서 매니저보다 먼저 입사한 사원을 조회하시오. (SELF JOIN)
-- 1) ANSI
SELECT E.EMPLOYEE_ID
     , E.HIRE_DATE
     , M.HIRE_DATE
  FROM EMPLOYEES E INNER JOIN EMPLOYEES M
    ON E.MANAGER_ID = M.EMPLOYEE_ID
 WHERE E.HIRE_DATE <= M.HIRE_DATE;


-- 2) 오라클
SELECT E.EMPLOYEE_ID
     , E.HIRE_DATE
     , M.HIRE_DATE
  FROM EMPLOYEES E, EMPLOYEES M
 WHERE E.MANAGER_ID = M.EMPLOYEE_ID
   AND E.HIRE_DATE <= M.HIRE_DATE;


-- 10. 같은 부서에 근무하는 사원 중에서 나보다 SALARY가 높은 사원 정보를 조회하시오. (SELF JOIN)
-- 1) ANSI
SELECT E.EMPLOYEE_ID
     , E.SALARY
     , D.EMPLOYEE_ID
     , D.SALARY
  FROM EMPLOYEES E INNER JOIN EMPLOYEES D
    ON E.DEPARTMENT_ID = D.DEPARTMENT_ID
 WHERE E.SALARY < D.SALARY
 ORDER BY E.EMPLOYEE_ID;

-- 2) 오라클
SELECT E.EMPLOYEE_ID
     , E.SALARY
     , D.EMPLOYEE_ID
     , D.SALARY
  FROM EMPLOYEES E, EMPLOYEES D
 WHERE E.DEPARTMENT_ID = D.DEPARTMENT_ID
   AND E.SALARY < D.SALARY
 ORDER BY E.EMPLOYEE_ID;